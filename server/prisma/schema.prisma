generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  email              String           @unique
  password           String
  firstName          String
  lastName           String
  role               Role             @default(USER)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  resetToken         String?
  resetTokenExp      DateTime?
  isVerified         Boolean          @default(false)
  profileDescription String?
  profilePicture     String?
  profileUrl         String?
  profileVisibility  String           @default("PUBLIC")
  verificationExp    DateTime?
  verificationToken  String?
  language           String           @default("fr")
  phone              String?
  isActive           Boolean          @default(true)
  status             UserStatus       @default(PENDING)
  birthday           DateTime?
  amlCheck           AMLCheck?
  accountRequest     AccountRequest?
  beneficiaries      Cagnotte[]       @relation("CagnotteBeneficiary")
  cagnottes          Cagnotte[]       @relation("CagnotteCreator")
  cagnotteReports    CagnotteReport[] @relation("CagnotteReportAdmin")
  kycAuditAdmin      KYCAuditLog[]    @relation("KYCAuditAdmin")
  kycAuditLogs       KYCAuditLog[]
  kycVerification    KYCVerification?
  promises           Promise[]        @relation("PromiseContributor")
  notifications      Notification[]
}

model Cagnotte {
  id              String           @id @default(uuid())
  title           String
  description     String
  goalAmount      Float
  currentAmount   Float            @default(0)
  startDate       DateTime         @default(now())
  endDate         DateTime
  status          CagnotteStatus   @default(DRAFT)
  creatorId       String
  beneficiaryId   String
  categoryId      String
  coverImage      String?
  coverVideo      String?
  mediaType       String?
  mediaFilename   String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  currentStep     Int              @default(1)
  beneficiaryType String?          @default("self")
  country         String?          @default("Tunisie")
  postalCode      String?
  currency        String?          @default("TND")
  beneficiary     User             @relation("CagnotteBeneficiary", fields: [beneficiaryId], references: [id])
  category        Category         @relation(fields: [categoryId], references: [id])
  creator         User             @relation("CagnotteCreator", fields: [creatorId], references: [id])
  reports         CagnotteReport[]
  promises        Promise[]
}

model Promise {
  id            String        @id @default(uuid())
  amount        Float
  status        PromiseStatus @default(PENDING)
  contributorId String
  cagnotteId    String
  promisedAt    DateTime      @default(now())
  paidAt        DateTime?
  cagnotte      Cagnotte      @relation(fields: [cagnotteId], references: [id])
  contributor   User          @relation("PromiseContributor", fields: [contributorId], references: [id])
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  cagnottes   Cagnotte[]
}

model KYCVerification {
  id                 String             @id @default(uuid())
  userId             String             @unique
  documentType       DocumentType
  documentFrontUrl   String
  documentBackUrl    String?
  verificationStatus VerificationStatus @default(PENDING)
  riskScore          Int                @default(0)
  verificationDate   DateTime?
  expiryDate         DateTime?
  rejectionReason    String?
  jumioReference     String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id])
}

model AMLCheck {
  id                 String    @id @default(uuid())
  userId             String    @unique
  ofacStatus         Boolean   @default(false)
  unStatus           Boolean   @default(false)
  lastCheckDate      DateTime  @default(now())
  riskLevel          RiskLevel @default(LOW)
  suspiciousActivity Boolean   @default(false)
  notes              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
}

model KYCAuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   String
  adminId   String?
  createdAt DateTime @default(now())
  admin     User?    @relation("KYCAuditAdmin", fields: [adminId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model AccountRequest {
  id          String   @id @default(uuid())
  userId      String   @unique
  email       String
  requestType String
  reason      String
  status      String   @default("PENDING")
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model CagnotteReport {
  id            String       @id @default(uuid())
  cagnotteId    String
  type          ReportType   @default(OTHER)
  priority      Priority     @default(MEDIUM)
  reason        String
  description   String
  reporterName  String
  reporterEmail String
  status        ReportStatus @default(PENDING)
  adminNotes    String?
  adminId       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  admin         User?        @relation("CagnotteReportAdmin", fields: [adminId], references: [id])
  cagnotte      Cagnotte     @relation(fields: [cagnotteId], references: [id])

  @@index([cagnotteId])
  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum CagnotteStatus {
  DRAFT
  ACTIVE
  CLOSED
  SUCCESS
  FAILED
  PENDING
  REJECTED
  SUSPENDED
}

enum PromiseStatus {
  PENDING
  PAID
  CANCELLED
}

enum DocumentType {
  CARTE_IDENTITE
  PASSEPORT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  BLOCKED
  EXPIRED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  BLOCKED
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ReportType {
  FRAUD
  INAPPROPRIATE
  SPAM
  DUPLICATE
  COMMENT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  title       String
  message     String           @db.Text
  read        Boolean          @default(false)
  actionUrl   String?
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([read])
}

enum NotificationType {
  SYSTEM
  DONATION
  CAGNOTTE
  COMMENT
  REPORT
  ADMIN
}
