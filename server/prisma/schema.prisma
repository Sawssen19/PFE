generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  firstName     String
  lastName      String
  role          Role        @default(USER)
  status        UserStatus  @default(PENDING)
  verificationToken String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  resetToken    String?
  resetTokenExp DateTime?
  // ðŸ†• COLONNES EXISTANTES DE LA BASE
  isActive      Boolean     @default(true)
  isVerified    Boolean     @default(false)
  language      String      @default("fr")
  profileDescription String?
  profileUrl   String?
  profileVisibility String   @default("PUBLIC")
  // ðŸ†• CHAMPS MANQUANTS POUR L'AUTH
  profilePicture String?
  phone         String?
  birthday      DateTime?  // âœ… Date de naissance
  verificationExp DateTime?
  // ðŸ†• RELATIONS EXISTANTES
  cagnottes     Cagnotte[]  @relation("CagnotteCreator")
  promises      Promise[]   @relation("PromiseContributor")
  beneficiaries Cagnotte[]  @relation("CagnotteBeneficiary")
  // ðŸ†• NOUVEAU : Relations KYC/AML
  kycVerification KYCVerification?
  amlCheck        AMLCheck?
  kycAuditLogs    KYCAuditLog[]
  kycAuditAdmin   KYCAuditLog[] @relation("KYCAuditAdmin")
  // ðŸ†• RELATION POUR LES DEMANDES DE SUPPRESSION
  accountRequest  AccountRequest?
}

model Cagnotte {
  id            String     @id @default(uuid())
  title         String
  description   String
  goalAmount    Float
  currentAmount Float      @default(0)
  startDate     DateTime   @default(now())
  endDate       DateTime
  status        CagnotteStatus @default(ACTIVE)
  creatorId     String
  creator       User       @relation("CagnotteCreator", fields: [creatorId], references: [id])
  beneficiaryId String
  beneficiary   User       @relation("CagnotteBeneficiary", fields: [beneficiaryId], references: [id])
  categoryId    String
  category      Category   @relation(fields: [categoryId], references: [id])
  promises      Promise[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Promise {
  id            String    @id @default(uuid())
  amount        Float
  status        PromiseStatus @default(PENDING)
  contributorId String
  contributor   User      @relation("PromiseContributor", fields: [contributorId], references: [id])
  cagnotteId    String
  cagnotte      Cagnotte  @relation(fields: [cagnotteId], references: [id])
  promisedAt    DateTime  @default(now())
  paidAt        DateTime?
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  cagnottes   Cagnotte[]
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum CagnotteStatus {
  ACTIVE
  CLOSED
  SUCCESS
  FAILED
}

enum PromiseStatus {
  PENDING
  PAID
  CANCELLED
}

// ðŸ†• NOUVEAU : ModÃ¨les KYC/AML pour Sprint 1
model KYCVerification {
  id                String           @id @default(uuid())
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id])
  documentType      DocumentType
  documentFrontUrl  String
  documentBackUrl   String?
  verificationStatus VerificationStatus @default(PENDING)
  riskScore         Int              @default(0)
  verificationDate  DateTime?
  expiryDate        DateTime?
  rejectionReason   String?
  jumioReference    String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model AMLCheck {
  id                String           @id @default(uuid())
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id])
  ofacStatus        Boolean          @default(false)
  unStatus          Boolean          @default(false)
  lastCheckDate     DateTime         @default(now())
  riskLevel         RiskLevel        @default(LOW)
  suspiciousActivity Boolean         @default(false)
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model KYCAuditLog {
  id                String           @id @default(uuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  action            String
  details           String
  adminId           String?
  admin             User?            @relation("KYCAuditAdmin", fields: [adminId], references: [id])
  createdAt         DateTime         @default(now())
}

enum DocumentType {
  CARTE_IDENTITE
  PASSEPORT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  BLOCKED
  EXPIRED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  BLOCKED
}

// ðŸ†• MODÃˆLE POUR LES DEMANDES DE SUPPRESSION DE COMPTE
model AccountRequest {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  email       String   // Email de l'utilisateur
  requestType String   // DELETION, DEACTIVATION
  reason      String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  submittedAt DateTime @default(now()) // Date de soumission
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}