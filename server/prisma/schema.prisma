generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              Role      @default(USER)
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(true)
  
  // ‚úÖ Champs de profil avec types et valeurs par d√©faut corrects
  profilePicture     String?   @default(dbgenerated("NULL")) // Forcer NULL par d√©faut
  profileUrl         String?   @default(dbgenerated("NULL")) // Forcer NULL par d√©faut
  profileDescription String?   @default(dbgenerated("NULL")) // Forcer NULL par d√©faut
  profileVisibility  String?   @default("private")            // String avec valeur par d√©faut
  
  // üì± Nouveaux champs de profil
  phone              String?   @default(dbgenerated("NULL")) // Num√©ro de t√©l√©phone
  birthday           String?   @default(dbgenerated("NULL")) // Date de naissance (format ISO)
  language           String?   @default("fr")                // Langue de communication
  
  // üîê Champs de v√©rification d'email
  verificationToken  String?   // Token de v√©rification unique
  verificationExp    DateTime? // Expiration du token de v√©rification
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  resetToken        String?
  resetTokenExp     DateTime?

  // Relations
  accountRequests   AccountRequest[]
}

model AccountRequest {
  id            String           @id @default(uuid())
  userId        String
  email         String
  requestType   RequestType
  reason        String?
  status        RequestStatus    @default(PENDING)
  submittedAt   DateTime         @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?
  notes         String?

  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([submittedAt])
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

enum RequestType {
  DELETION
  DEACTIVATION
}

enum RequestStatus {
  PENDING
  REVIEWING
  APPROVED
  REJECTED
}