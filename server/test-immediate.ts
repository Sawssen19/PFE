import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testImmediateProfileLogic() {
  try {
    console.log('üß™ TEST IMM√âDIAT DE LA LOGIQUE DE PROFIL...\n');
    
    // 1. Cr√©er un utilisateur de test
    console.log('üìù Cr√©ation d\'un utilisateur de test...');
    const testUser = await prisma.user.create({
      data: {
        email: `test-${Date.now()}@example.com`,
        password: 'hashedpassword123',
        firstName: 'Test',
        lastName: 'Immediate',
        // NE PAS sp√©cifier profilePicture - doit √™tre null par d√©faut
      },
    });
    
    console.log('‚úÖ Utilisateur de test cr√©√©:', {
      id: testUser.id,
      email: testUser.email,
      profilePicture: testUser.profilePicture,
      isClean: testUser.profilePicture === null
    });
    
    // 2. V√©rifier imm√©diatement si profilePicture est null
    if (testUser.profilePicture !== null) {
      console.log('üö® PROBL√àME: L\'utilisateur a √©t√© cr√©√© avec une photo!');
      console.log('üßπ Tentative de nettoyage imm√©diat...');
      
      await prisma.user.update({
        where: { id: testUser.id },
        data: { profilePicture: null }
      });
      
      console.log('‚úÖ Nettoyage effectu√©');
    } else {
      console.log('‚úÖ SUCC√àS: L\'utilisateur a √©t√© cr√©√© sans photo');
    }
    
    // 3. Simuler la r√©cup√©ration du profil (comme dans le contr√¥leur)
    console.log('\nüîç Test de la logique de r√©cup√©ration du profil...');
    
    const user = await prisma.user.findUnique({
      where: { id: testUser.id },
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        profilePicture: true,
        createdAt: true,
      }
    });
    
    if (!user) {
      throw new Error('Utilisateur de test non trouv√©');
    }
    
    // LOGIQUE DE NETTOYAGE (copi√©e du contr√¥leur)
    let profilePicture = user.profilePicture;
    let shouldCleanPhoto = false;
    let reason = '';
    
    // V√©rifier si c'est un nouvel utilisateur (moins de 24h)
    const isNewUser = Date.now() - user.createdAt.getTime() < 24 * 60 * 60 * 1000;
    
    // R√àGLE ABSOLUE : Tout nouvel utilisateur doit avoir profilePicture = null
    if (isNewUser) {
      shouldCleanPhoto = true;
      reason = 'Nouvel utilisateur - R√àGLE ABSOLUE';
      console.log('üÜï NOUVEL UTILISATEUR D√âTECT√â - Application de la R√àGLE ABSOLUE');
    }
    
    if (shouldCleanPhoto) {
      console.log('üö® NETTOYAGE AGGRESSIF:', {
        userId: user.id,
        reason,
        currentPhoto: profilePicture,
        isNewUser
      });
      
      try {
        await prisma.user.update({
          where: { id: user.id },
          data: { profilePicture: null }
        });
        
        profilePicture = null;
        console.log('‚úÖ Photo nettoy√©e avec succ√®s');
        
      } catch (cleanupError) {
        console.error('‚ùå Erreur lors du nettoyage:', cleanupError);
        profilePicture = null;
      }
    }
    
    // 4. V√©rifier le r√©sultat final
    const finalUser = await prisma.user.findUnique({
      where: { id: testUser.id }
    });
    
    console.log('\nüìä R√âSULTAT FINAL:', {
      id: finalUser?.id,
      email: finalUser?.email,
      profilePicture: finalUser?.profilePicture,
      shouldShowDefaultAvatar: !finalUser?.profilePicture,
      isClean: finalUser?.profilePicture === null
    });
    
    if (!finalUser?.profilePicture) {
      console.log('‚úÖ SUCC√àS TOTAL: L\'utilisateur affichera l\'avatar par d√©faut');
    } else {
      console.log('‚ùå √âCHEC: L\'utilisateur a encore une photo suspecte');
    }
    
    // 5. Nettoyer l'utilisateur de test
    console.log('\nüßπ Nettoyage de l\'utilisateur de test...');
    await prisma.user.delete({
      where: { id: testUser.id }
    });
    console.log('‚úÖ Utilisateur de test supprim√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le test imm√©diat
console.log('üöÄ D√©marrage du test imm√©diat...\n');
testImmediateProfileLogic(); 