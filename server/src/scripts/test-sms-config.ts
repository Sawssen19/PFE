#!/usr/bin/env ts-node

import { SmsService } from '../services/smsService';

/**
 * üß™ Script de test pour la configuration SMS
 * Teste la connexion et l'envoi de SMS de r√©initialisation
 */

async function testSmsConfiguration() {
  console.log('üß™ TEST DE LA CONFIGURATION SMS');
  console.log('=====================================');
  
  try {
    // 1. Test de connexion au service SMS
    console.log('1. Test de connexion au service SMS...');
    const connectionTest = await SmsService.testConnection();
    
    if (connectionTest) {
      console.log('‚úÖ Test de connexion SMS r√©ussi !');
      console.log('‚úÖ Configuration SMS valide !');
    } else {
      console.log('‚ùå Test de connexion SMS √©chou√© !');
      return;
    }
    
    // 2. Test d'envoi de SMS de r√©initialisation
    console.log('\n2. Test d\'envoi de SMS de r√©initialisation...');
    const testPhone = '+33 6 12 34 56 78'; // Num√©ro de test
    const testFirstName = 'Test';
    const testToken = 'test-token-123';
    
    const smsTest = await SmsService.sendPasswordResetSMS(testPhone, testFirstName, testToken);
    
    if (smsTest) {
      console.log('‚úÖ SMS de r√©initialisation envoy√© avec succ√®s !');
    } else {
      console.log('‚ùå √âchec de l\'envoi du SMS de r√©initialisation !');
    }
    
    // 3. Test de validation de num√©ro de t√©l√©phone
    console.log('\n3. Test de validation de num√©ros de t√©l√©phone...');
    const testNumbers = [
      '+33 6 12 34 56 78',
      '06 12 34 56 78',
      '+1 555 123 4567',
      'invalid-phone',
      ''
    ];
    
    testNumbers.forEach(phone => {
      const isValid = SmsService.validatePhoneNumber(phone);
      const status = isValid ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${phone} -> ${isValid ? 'Valide' : 'Invalide'}`);
    });
    
    // 4. Test de formatage de num√©ros de t√©l√©phone
    console.log('\n4. Test de formatage de num√©ros de t√©l√©phone...');
    const formatTestNumbers = [
      '06 12 34 56 78',
      '+33 6 12 34 56 78',
      '1 555 123 4567'
    ];
    
    formatTestNumbers.forEach(phone => {
      const formatted = SmsService.formatPhoneNumber(phone);
      console.log(`üì± ${phone} -> ${formatted}`);
    });
    
    console.log('\nüìù R√âSUM√â :');
    console.log('- Si vous voyez des erreurs de connexion, configurez votre service SMS');
    console.log('- Si la connexion r√©ussit, votre configuration SMS est pr√™te !');
    console.log('- Pour la production, configurez un vrai service SMS (Twilio, Vonage, etc.)');
    
    console.log('\n‚úÖ Test termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test SMS:', error);
  }
}

// Ex√©cuter le test si le script est appel√© directement
if (require.main === module) {
  testSmsConfiguration();
}

export { testSmsConfiguration }; 